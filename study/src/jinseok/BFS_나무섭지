import java.io.;
import java.util.;

public class Main {

static int n, m;
static char[][] map;
static boolean[][] vis;

static int nDist = 987654321; // 남우와 문 사이 거리
static int gDist = 987654321; // 귀신들과 문 사이 거리

static int[] dr = {1, 0, -1, 0};
static int[] dc = {0, 1, 0, -1};

static Queue<Point> q = new ArrayDeque<>();     // BFS 큐
static List<Point> gList = new ArrayList<>();   // 유령 위치 리스트
static Point d;

public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    n = sc.nextInt();
    m = sc.nextInt();

    map = new char[n][m];
    for (int i = 0; i < n; i++) {
        String line = sc.next();
        for (int j = 0; j < m; j++) {
            map[i][j] = line.charAt(j);
            if (map[i][j] == 'N') q.add(new Point(i, j, 0));
            if (map[i][j] == 'G') gList.add(new Point(i, j, 0));
            if (map[i][j] == 'D') d = new Point(i, j, 0);
        }
    }
    
    vis = new boolean[n][m];
    
    Point s = q.peek();
    vis[s.r][s.c] = true;

    while (!q.isEmpty()) {
        Point cur = q.remove();

        if (cur.r == d.r && cur.c == d.c) { // 남우가 문에 도착한 경우
            nDist = cur.d;                  // 남우와 문 사이 거리 (BFS이기 때문에 최단거리가 될 수 밖에 없음)
            break;
        }

        for (int i = 0; i < 4; i++) {
            int nr = cur.r + dr[i];
            int nc = cur.c + dc[i];

            if (nc < 0 || nr < 0 || nr >= n || nc >= m) continue;
            if (vis[nr][nc] || map[nr][nc] == '#') continue;

            vis[nr][nc] = true;
            q.add(new Point(nr, nc, cur.d + 1));
        }
    }

    // 귀신들과 문의 최소거리를 구함
    for (Point g : gList) {
        gDist = Math.min(gDist, Math.abs(d.r - g.r) + Math.abs(d.c - g.c));
    }

    // 남우의 거리가 귀신의 최소 거리 보다 크면 가지 못함
    if (nDist > gDist) System.out.println("No");
    else System.out.println("Yes");
    
}

// 남우가 r행 c열에 있을 때, 출발지로 부터 간 거리 d
static class Point {
    int r, c, d;
    Point(int r, int c, int d) {
        this.r = r;
        this.c = c;
        this.d = d;            
    }
}
