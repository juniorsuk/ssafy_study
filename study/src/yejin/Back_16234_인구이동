import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static class Country {
		int r;
		int c;

		public Country(int r, int c) {
			this.r = r;
			this.c = c;
		}

		@Override
		public String toString() {
			return "Country [r=" + r + ", c=" + c + "]";
		}

	}

	static int N, L, R, day;
	static int[][] earth;
	static int[] dr = { -1, 1, 0, 0 }; // 상 하 좌 우
	static int[] dc = { 0, 0, -1, 1 };

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		L = Integer.parseInt(st.nextToken());
		R = Integer.parseInt(st.nextToken());
		day = 0; // 며칠이 지났는지
		earth = new int[N][N];
		for (int r = 0; r < N; r++) {
			st = new StringTokenizer(br.readLine());
			for (int c = 0; c < N; c++) {
				earth[r][c] = Integer.parseInt(st.nextToken());
			}
		}

		// -------- 입력값 받기 완료 ---------//

		// DFS() + BFS()
		DFS();

		System.out.println(day);

	}

	private static void DFS() {

		boolean flag = true;
		boolean[][] visited = new boolean[N][N];
		
		for (int r = 0; r < N; r++) {
			for (int c = 0; c < N; c++) {
				if(visited[r][c]) continue;
				
				int sum = 0;
				int cnt = 0;
				
				Queue<Country> que = new ArrayDeque<>();
				Queue<Country> que2 = new ArrayDeque<>();
				visited[r][c] = true;
				que.add(new Country(r,c));
				que2.add(new Country(r,c));
				while(!que.isEmpty()) {
					Country curr = que.poll();
					int rr = curr.r;
					int cc = curr.c;
					sum += earth[rr][cc];
					cnt++;
					for (int d = 0; d < 4; d++) {
						int nr = rr + dr[d];
						int nc = cc + dc[d];
						if (nr >= 0 && nc >= 0 && nr < N && nc < N && !visited[nr][nc]) {
							int tmp = Math.abs(earth[nr][nc]-earth[rr][cc]);
							if(tmp>=L && tmp<=R) {
								flag = false;
								visited[nr][nc] = true;
								que.add(new Country(nr,nc));
								que2.add(new Country(nr,nc));
							}
						}
					}
				}
				int ans = sum/cnt;
				while(!que2.isEmpty()) {
					Country curr = que2.poll();
					earth[curr.r][curr.c] = ans;
				}
			}
		}
		
		if(flag) return; // 갱신되지 않았음.
		day++; // 하루가 지났음.

		
		DFS();

	}

}
